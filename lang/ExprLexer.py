# Generated from Expr.g by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,173,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,
        1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,
        14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
        20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,4,24,135,8,24,11,24,12,
        24,136,1,25,1,25,1,26,1,26,1,26,5,26,144,8,26,10,26,12,26,147,9,
        26,1,27,1,27,1,27,1,28,1,28,1,28,5,28,155,8,28,10,28,12,28,158,9,
        28,1,28,1,28,1,29,4,29,163,8,29,11,29,12,29,164,1,30,4,30,168,8,
        30,11,30,12,30,169,1,30,1,30,0,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,0,47,23,49,24,51,25,53,26,55,0,57,27,
        59,28,61,29,1,0,5,2,0,65,90,97,122,8,0,34,34,39,39,92,92,98,98,102,
        102,110,110,114,114,116,116,2,0,34,34,92,92,3,0,65,90,97,122,128,
        255,2,0,9,10,32,32,177,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,1,63,1,0,0,0,3,66,1,0,0,0,5,70,1,0,0,0,7,74,1,0,0,0,9,78,1,
        0,0,0,11,81,1,0,0,0,13,86,1,0,0,0,15,92,1,0,0,0,17,95,1,0,0,0,19,
        98,1,0,0,0,21,101,1,0,0,0,23,104,1,0,0,0,25,106,1,0,0,0,27,109,1,
        0,0,0,29,111,1,0,0,0,31,113,1,0,0,0,33,116,1,0,0,0,35,119,1,0,0,
        0,37,121,1,0,0,0,39,123,1,0,0,0,41,125,1,0,0,0,43,127,1,0,0,0,45,
        129,1,0,0,0,47,131,1,0,0,0,49,134,1,0,0,0,51,138,1,0,0,0,53,140,
        1,0,0,0,55,148,1,0,0,0,57,151,1,0,0,0,59,162,1,0,0,0,61,167,1,0,
        0,0,63,64,5,60,0,0,64,65,5,45,0,0,65,2,1,0,0,0,66,67,5,60,0,0,67,
        68,5,63,0,0,68,69,5,62,0,0,69,4,1,0,0,0,70,71,5,60,0,0,71,72,5,33,
        0,0,72,73,5,62,0,0,73,6,1,0,0,0,74,75,5,60,0,0,75,76,5,58,0,0,76,
        77,5,62,0,0,77,8,1,0,0,0,78,79,5,105,0,0,79,80,5,102,0,0,80,10,1,
        0,0,0,81,82,5,101,0,0,82,83,5,108,0,0,83,84,5,115,0,0,84,85,5,101,
        0,0,85,12,1,0,0,0,86,87,5,119,0,0,87,88,5,104,0,0,88,89,5,105,0,
        0,89,90,5,108,0,0,90,91,5,101,0,0,91,14,1,0,0,0,92,93,5,60,0,0,93,
        94,5,60,0,0,94,16,1,0,0,0,95,96,5,56,0,0,96,97,5,60,0,0,97,18,1,
        0,0,0,98,99,5,124,0,0,99,100,5,58,0,0,100,20,1,0,0,0,101,102,5,58,
        0,0,102,103,5,124,0,0,103,22,1,0,0,0,104,105,5,61,0,0,105,24,1,0,
        0,0,106,107,5,47,0,0,107,108,5,61,0,0,108,26,1,0,0,0,109,110,5,62,
        0,0,110,28,1,0,0,0,111,112,5,60,0,0,112,30,1,0,0,0,113,114,5,62,
        0,0,114,115,5,61,0,0,115,32,1,0,0,0,116,117,5,60,0,0,117,118,5,61,
        0,0,118,34,1,0,0,0,119,120,5,43,0,0,120,36,1,0,0,0,121,122,5,45,
        0,0,122,38,1,0,0,0,123,124,5,42,0,0,124,40,1,0,0,0,125,126,5,47,
        0,0,126,42,1,0,0,0,127,128,5,37,0,0,128,44,1,0,0,0,129,130,2,48,
        57,0,130,46,1,0,0,0,131,132,7,0,0,0,132,48,1,0,0,0,133,135,3,45,
        22,0,134,133,1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,
        0,0,137,50,1,0,0,0,138,139,2,48,49,0,139,52,1,0,0,0,140,145,3,47,
        23,0,141,144,3,47,23,0,142,144,3,45,22,0,143,141,1,0,0,0,143,142,
        1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,54,1,
        0,0,0,147,145,1,0,0,0,148,149,5,92,0,0,149,150,7,1,0,0,150,56,1,
        0,0,0,151,156,5,34,0,0,152,155,3,55,27,0,153,155,8,2,0,0,154,152,
        1,0,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,
        1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,160,5,34,0,0,160,58,
        1,0,0,0,161,163,7,3,0,0,162,161,1,0,0,0,163,164,1,0,0,0,164,162,
        1,0,0,0,164,165,1,0,0,0,165,60,1,0,0,0,166,168,7,4,0,0,167,166,1,
        0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,171,1,
        0,0,0,171,172,6,30,0,0,172,62,1,0,0,0,8,0,136,143,145,154,156,164,
        169,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ASSIGN = 1
    READ = 2
    WRITE = 3
    REPRO = 4
    IF = 5
    ELSE = 6
    WHILE = 7
    CONCAT = 8
    CUT = 9
    LPAREN = 10
    RPAREN = 11
    EQ = 12
    NEQ = 13
    GT = 14
    LT = 15
    GE = 16
    LE = 17
    PLUS = 18
    MINUS = 19
    MUL = 20
    DIV = 21
    MOD = 22
    LETTER = 23
    NUMBER = 24
    BOOLEAN = 25
    ID = 26
    STRING = 27
    WORD = 28
    WS = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<-'", "'<?>'", "'<!>'", "'<:>'", "'if'", "'else'", "'while'", 
            "'<<'", "'8<'", "'|:'", "':|'", "'='", "'/='", "'>'", "'<'", 
            "'>='", "'<='", "'+'", "'-'", "'*'", "'/'", "'%'" ]

    symbolicNames = [ "<INVALID>",
            "ASSIGN", "READ", "WRITE", "REPRO", "IF", "ELSE", "WHILE", "CONCAT", 
            "CUT", "LPAREN", "RPAREN", "EQ", "NEQ", "GT", "LT", "GE", "LE", 
            "PLUS", "MINUS", "MUL", "DIV", "MOD", "LETTER", "NUMBER", "BOOLEAN", 
            "ID", "STRING", "WORD", "WS" ]

    ruleNames = [ "ASSIGN", "READ", "WRITE", "REPRO", "IF", "ELSE", "WHILE", 
                  "CONCAT", "CUT", "LPAREN", "RPAREN", "EQ", "NEQ", "GT", 
                  "LT", "GE", "LE", "PLUS", "MINUS", "MUL", "DIV", "MOD", 
                  "DIGIT", "LETTER", "NUMBER", "BOOLEAN", "ID", "ESC_SEQ", 
                  "STRING", "WORD", "WS" ]

    grammarFileName = "Expr.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


